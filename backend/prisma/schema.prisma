// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
    id           Int    @id @default(autoincrement())
    email        String @unique
    passwordHash String
    firstName    String
    lastName     String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    recipes       Recipe[]
    savedRecipes  SavedRecipe[]
    cookedRecipes CookedRecipe[]
}

model Recipe {
    id          Int        @id @default(autoincrement())
    title       String
    description String?
    imageUrl    String?
    prepTime    Int? // minutes
    cookTime    Int? // minutes
    servings    Int?
    difficulty  Difficulty @default(EASY)
    isPublic    Boolean    @default(true)

    // Recipe Content
    ingredients  Json?
    instructions Json?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Foreign Keys
    userId Int

    // Relations
    user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    savedBy  SavedRecipe[]
    cookedBy CookedRecipe[]
}

model SavedRecipe {
    id Int @id @default(autoincrement())

    savedAt DateTime @default(now())

    // Foreign Keys
    userId   Int
    recipeId Int

    // Relations
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model CookedRecipe {
    id     Int  @id @default(autoincrement())
    rating Int? // Personal rating 1-5 

    cookedAt DateTime @default(now())

    // Foreign Keys
    userId   Int
    recipeId Int

    // Relations
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

enum Difficulty {
    EASY
    MEDIUM
    HARD
}
